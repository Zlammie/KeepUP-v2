<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Simple CRM</title>
   <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <link rel="stylesheet" href="/assets/css/main.css">
  
</head>
<body>
<%- include('../partials/nav') %>
<%- include('../partials/top-nav-competition') %>

<div class="horizontal-cont">
  <div class="side-bar card . card--grey main-cont">
     <div class="card card--white">
          <div class="card-header">
            Competition Info
          </div>
          <div class="card-body">
            <h5 class="card-title"><%= competition.communityName %></h5>
            <p class="card-text">
              Builder: <strong><%= competition.builderName %></strong>
            </p>
          </div>
      </div>
          <!-- Add / Update Floor Plans button -->
      <button 
        type="button"
        class="btn btn-secondary mb-3"
        data-bs-toggle="modal"
        data-bs-target="#floorPlanModal"
      >
        Add / Update Floor Plans
      </button>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
      <!-- Floor Plans Modal -->
      <div
        class="modal fade"
        id="floorPlanModal"
        tabindex="-1"
        aria-labelledby="floorPlanModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <form id="floorPlanForm">
              <div class="modal-header">
                <h5 class="modal-title" id="floorPlanModalLabel">
                  Floor Plans
                </h5>
                <button
                  type="button"
                  class="btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close"
                ></button>
              </div>
              <div class="modal-body">
                <!-- existing floor plans list -->
                <div id="floorPlanList" class="list-group mb-4"></div>

                <!-- floor plan form fields -->
                <input type="hidden" id="fpId" name="id" />
                <div class="mb-3">
                  <label for="fpName" class="form-label">Floor Plan Name</label>
                  <input
                    type="text"
                    id="fpName"
                    name="name"
                    class="form-control"
                    required
                  />
                </div>
                <div class="row">
                  <div class="col-md-4 mb-3">
                    <label for="fpSqft" class="form-label">Sqft</label>
                    <input
                      type="number"
                      id="fpSqft"
                      name="sqft"
                      class="form-control"
                    />
                  </div>
                  <div class="col-md-4 mb-3">
                    <label for="fpBed" class="form-label">Bed</label>
                    <input
                      type="number"
                      id="fpBed"
                      name="bed"
                      class="form-control"
                    />
                  </div>
                  <div class="col-md-4 mb-3">
                    <label for="fpBath" class="form-label">Bath</label>
                    <input
                      type="number"
                      id="fpBath"
                      name="bath"
                      class="form-control"
                      step="any"
                      min="0"  
                    />
                  </div>
                  <div class="col-md-4 mb-3">
                    <label for="fpGarage" class="form-label">Garage</label>
                    <input
                      type="number"
                      id="fpGarage"
                      name="garage"
                      class="form-control"
                    />
                  </div>
                  <div class="col-md-4 mb-3">
                    <label for="fpStory" class="form-label">Story Type</label>
                    <select
                      id="fpStory"
                      name="storyType"
                      class="form-select"
                      required
                    >
                      <option value="Single">Single Story</option>
                      <option value="Two">Two Story</option>
                    </select>
                  </div>
                </div>
              </div>
              <div class="modal-footer">
                <button type="submit" class="btn btn-primary">
                  Save Floor Plan
                </button>
                <button
                  type="button"
                  class="btn btn-secondary"
                  data-bs-dismiss="modal"
                >
                  Close
                </button>
              </div>
            </form>
          </div>
        </div>
      </div> 
      <div class="card card--white">
        <h2>To Do List for June</h2>
        <ul>
          <li>Check Changes in Floor Plans</li>
          <li>Update Base Pricing for June</li>
          <li>Add New Quick Move-In Homes</li>
          <li>Mark Sold Quick Move-Ins</li>
          <li>Add Other Solds If applicable</li>
          <li>Check Lot Cout</li>
          <li>Check Quick Move Count</li>
          <li>Add Sales, Cans, Closings</li>
        </ul>
      </div> 
  </div>
   <main class="container mt-4">
    
           <nav class="month-nav-container mt-3">
            <div class="d-flex overflow-auto">
              <ul 
                id="monthNav" 
                class="nav nav-pills flex-nowrap"
              ></ul>
            </div>
                <!-- ───────── section tabs ───────── -->
              <ul id="sectionNav" class="nav nav-tabs mt-3">
                 <li class="nav-item">
                    <a class="nav-link active" href="#" data-section="metrics">Metrics</a>
                  </li>
                <li class="nav-item">
                  <a class="nav-link" href="#" data-section="price">Floor Plans</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="#" data-section="inventory">Inventory</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="#" data-section="sales">Sales</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="#" data-section="notes">Notes</a>
                </li>
              </ul>
            </nav>
            <!-- ───────── Metrics Section ───────── -->
            <div class="section d-none" data-section-content="metrics">
              <h3 class="mt-5">Community Metrics</h3>
              <div class="container mt-3">
                <form id="metricsForm">
                  <div class="mb-3">
                    <label for="promotion" class="form-label">Promotion</label>
                    <textarea
                      id="promotion"
                      name="promotion"
                      class="form-control"
                      rows="3"
                      placeholder="Enter promotion details"
                    ></textarea>
                  </div>
                  <!-- Top 3 Plans -->
                  <div class="mb-3 card">
                    <label class="form-label">Top 3 Plans</label>
                    <input type="text" name="topPlan1" class="form-control mb-2" placeholder="1. Plan Name">
                    <input type="text" name="topPlan2" class="form-control mb-2" placeholder="2. Plan Name">
                    <input type="text" name="topPlan3" class="form-control" placeholder="3. Plan Name">
                  </div>

                  <!-- Pros & Cons -->
                  <div class="mb-3 card">
                    <label class="form-label">Pros</label>
                    <div id="prosList" class="mb-2"></div>
                    <div class="input-group mb-2">
                      <input type="text" id="newPro" class="form-control" placeholder="Add a pro">
                      <button type="button" id="addProBtn" class="btn btn-outline-secondary">Add</button>
                    </div>

                    <label class="form-label">Cons</label>
                    <div id="consList" class="mb-2"></div>
                    <div class="input-group">
                      <input type="text" id="newCon" class="form-control" placeholder="Add a con">
                      <button type="button" id="addConBtn" class="btn btn-outline-secondary">Add</button>
                    </div>
                  </div>

                  <!-- Lot Counts (placeholders) -->
                  <div class="row card">
                    <div class="col-md-3 mb-3">
                      <label class="form-label">Lot Count</label>
                      <input type="number" class="form-control" disabled placeholder="—">
                    </div>
                    <div class="col-md-3 mb-3">
                      <label class="form-label">Sold Lots</label>
                      <input type="number" class="form-control" disabled placeholder="—">
                    </div>
                    <div class="col-md-3 mb-3">
                      <label class="form-label">Remaining Lots</label>
                      <input type="number" class="form-control" disabled placeholder="—">
                    </div>
                    <div class="col-md-3 mb-3">
                      <label class="form-label">Quick Move-In Lots</label>
                      <input type="number" class="form-control" disabled placeholder="—">
                    </div>
                  </div>
                </form>
              </div>
            </div>
            <div class="section" data-section-content="price">
               <div id="monthTableContainer" class="container mt-4">
                <table id="monthTable" class="table table-bordered">
                  <thead>
                    <tr>
                      <th>Floor Plan</th>
                      <th>Sqft</th>
                      <th>Bed</th>
                      <th>Bath</th>
                      <th>Garage</th>
                      <th>Story</th>
                      <th>Price</th>
                    </tr>
                  </thead>
                  <tbody></tbody>
                </table>
              </div>
            </div>
            <div class="section d-none" data-section-content="inventory">
              <h3 class="mt-5">Quick Move-In Homes</h3>
              <div id="quickHomesContainer" class="container mt-2">
                <table id="quickHomesTable" class="table table-bordered">
                  <thead>
                    <tr>
                      <th>Address</th>
                      <th>List Date</th>
                      <th>Floor Plan</th>
                      <th>List Price</th>
                      <th>Sqft</th>
                      <th>Status</th>
                    </tr>
                  </thead>
                  <tbody></tbody>
                </table>
              </div>
              <h3 class="mt-5">Sold Homes</h3>
              <div id="soldHomesContainer" class="container mt-2">
                <table id="soldHomesTable" class="table table-bordered">
                  <thead>
                    <tr>
                      <th>Address</th>
                      <th>Floor Plan</th>
                      <th>List Price</th>
                      <th>Sqft</th>
                      <th>Status</th>
                      <th>List Date</th>
                      <th>Sold Date</th>
                    </tr>
                  </thead>
                  <tbody></tbody>
                </table>
              </div>
            </div>
            <div class="section d-none" data-section-content="sales">
              <h3 class="mt-5">Sales Summary</h3>
              <div id="salesContainer" class="container mt-2">
                <table id="salesTable" class="table table-bordered">
                  <thead>
                    <tr>
                      <th>Month</th>
                      <th>Sales</th>
                      <th>Cancels</th>
                      <th>Net</th>
                      <th>Closings</th>
                    </tr>
                  </thead>
                  <tbody></tbody>
                </table>
              </div>
            </div>
            <div class="section d-none" data-section-content="notes">
             <h3 class="mt-5">Notes</h3>
              <div class="container mt-2">
                <textarea
                  id="notes"
                  name="notes"
                  class="form-control"
                  rows="5"
                  placeholder="Enter any notes here"
                ></textarea>
              </div>
            </div>
      </main>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // ───────── cached DOM & constants ─────────
  const competitionId = '<%= competition._id %>';
  const now           = new Date();
  const monthNav      = document.getElementById('monthNav');
  const sectionNav    = document.getElementById('sectionNav');
  const priceBody     = document.querySelector('#monthTable tbody');
  const quickBody     = document.querySelector('#quickHomesTable tbody');
  const soldBody      = document.querySelector('#soldHomesTable tbody');
  const salesBody     = document.querySelector('#salesTable tbody');
  const monthNames    = ['January','February','March','April','May','June',
                         'July','August','September','October','November','December'];

  // ───────── Floor Plans modal setup ─────────
  const modalEl = document.getElementById('floorPlanModal');
  const modal   = new bootstrap.Modal(modalEl);
  const form    = document.getElementById('floorPlanForm');
  const list    = document.getElementById('floorPlanList');
  const fields  = {
    id:    document.getElementById('fpId'),
    name:  document.getElementById('fpName'),
    sqft:  document.getElementById('fpSqft'),
    bed:   document.getElementById('fpBed'),
    bath:  document.getElementById('fpBath'),
    garage:document.getElementById('fpGarage'),
    story: document.getElementById('fpStory')
  };

  async function loadFloorPlans() {
    const fps = await fetch(`/api/competitions/${competitionId}/floorplans`)
                  .then(r => r.json());
    list.innerHTML = '';
    fps.forEach(fp => {
      const item = document.createElement('a');
      item.href = '#';
      item.className = 'list-group-item list-group-item-action';
      item.textContent = fp.name;
      item.addEventListener('click', () => {
        fields.id.value    = fp._id;
        fields.name.value  = fp.name;
        fields.sqft.value  = fp.sqft || '';
        fields.bed.value   = fp.bed || '';
        fields.bath.value  = fp.bath || '';
        fields.garage.value= fp.garage || '';
        fields.story.value = fp.storyType;
      });
      list.appendChild(item);
    });
  }

  form.addEventListener('submit', async e => {
    e.preventDefault();
    const payload = {
      name:      fields.name.value,
      sqft:      parseFloat(fields.sqft.value) || 0,
      bed:       parseInt(fields.bed.value)   || 0,
      bath:      parseFloat(fields.bath.value)|| 0,
      garage:    parseInt(fields.garage.value)|| 0,
      storyType: fields.story.value
    };
    const isEdit = !!fields.id.value;
    const url    = isEdit
      ? `/api/competitions/${competitionId}/floorplans/${fields.id.value}`
      : `/api/competitions/${competitionId}/floorplans`;
    const method = isEdit ? 'PUT' : 'POST';
    const res    = await fetch(url, {
      method,
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify(payload)
    });
    if (res.ok) {
      form.reset();
      fields.id.value = '';
      loadFloorPlans();
      modal.hide();
    }
  });

  modalEl.addEventListener('show.bs.modal', () => {
    form.reset();
    fields.id.value = '';
  });
  loadFloorPlans();

  // ───────── build 6‐month nav ending last month ─────────
  const lastMonth   = new Date(now.getFullYear(), now.getMonth() - 1, 1);
  const activeValue = `${lastMonth.getFullYear()}-${String(lastMonth.getMonth()+1).padStart(2,'0')}`;
  monthNav.innerHTML = '';
  for (let i = 6; i >= 1; i--) {
    const d   = new Date(now.getFullYear(), now.getMonth() - i, 1);
    const val = `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}`;
    const li  = document.createElement('li');
    li.className = 'nav-item';
    li.innerHTML = `
      <a class="nav-link${val===activeValue?' active':''}" href="#"
         data-month="${val}">
        ${monthNames[d.getMonth()]} ${d.getFullYear()}
      </a>`;
    monthNav.appendChild(li);
  }

  // ───────── define loader functions ─────────
  async function loadMonth(month) {
    const [fps, prs] = await Promise.all([
      fetch(`/api/competitions/${competitionId}/floorplans`).then(r=>r.json()),
      fetch(`/api/competitions/${competitionId}/price-records?month=${month}`).then(r=>r.json())
    ]);
    const prMap = {};
    prs.forEach(pr => prMap[pr.floorPlan] = pr);
    priceBody.innerHTML = '';
    fps.forEach(fp => {
      const ex = prMap[fp._id];
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${fp.name}</td><td>${fp.sqft||''}</td>
        <td>${fp.bed||''}</td><td>${fp.bath||''}</td>
        <td>${fp.garage||''}</td><td>${fp.storyType}</td>
        <td>
          <input type="number" class="form-control price-input"
                 data-fp="${fp._id}"
                 value="${ex?ex.price:''}" step="0.01" />
        </td>`;
      priceBody.appendChild(tr);
    });
    document.querySelectorAll('.price-input').forEach(input => {
      input.addEventListener('blur', async e => {
        const fpId    = e.target.dataset.fp;
        const price   = parseFloat(e.target.value)||0;
        const existing= prMap[fpId];
        const url     = existing
          ? `/api/competitions/${competitionId}/price-records/${existing._id}`
          : `/api/competitions/${competitionId}/price-records`;
        const method  = existing?'PUT':'POST';
        const body    = existing
          ? { price }
          : { floorPlanId: fpId, month, price };
        await fetch(url, {
          method, headers:{'Content-Type':'application/json'},
          body: JSON.stringify(body)
        });
        loadMonth(month);
      });
    });
  }

  async function loadQuickHomes(month) {
    const fps  = await fetch(`/api/competitions/${competitionId}/floorplans`).then(r=>r.json());
    const recs = await fetch(`/api/competitions/${competitionId}/quick-moveins?month=${month}`).then(r=>r.json());
    const unsold = recs.filter(r=>r.status!=='SOLD');
    const sold   = recs.filter(r=>r.status==='SOLD');
    const statusOptions = [
      '<option value="Ready Now">Ready Now</option>',
      '<option value="SOLD">SOLD</option>',
      ...monthNames.map(m => `<option value="${m}">${m}</option>`)
    ].join('');

    // unsold rows
    quickBody.innerHTML = '';
    unsold.forEach(rec => {
      const tr = document.createElement('tr');
      tr.dataset.id = rec._id;
      tr.innerHTML = `
        <td><input class="form-control qmi-input" data-field="address"
                   value="${rec.address}" /></td>
        <td><input type="date" class="form-control qmi-input"
                   data-field="listDate"
                    value="${rec.listDate 
                        ? new Date(rec.listDate).toISOString().substr(0,10) 
                        : ''}"
                   required /></td>
        <td>
          <select class="form-select qmi-input" data-field="floorPlanId">
            ${fps.map(fp=>`<option value="${fp._id}"
              ${fp._id===rec.floorPlan?'selected':''}>${fp.name}</option>`).join('')}
          </select>
        </td>
        <td><input type="number" step="0.01" class="form-control qmi-input"
                   data-field="listPrice" value="${rec.listPrice}" /></td>
        <td><input type="number" class="form-control qmi-input"
                   data-field="sqft" value="${rec.sqft}" /></td>
        <td>
          <select class="form-select qmi-input" data-field="status">
            <option value="Ready Now" ${rec.status==='Ready Now'?'selected':''}>Ready Now</option>
            <option value="SOLD" ${rec.status==='SOLD'?'selected':''}>SOLD</option>
            ${monthNames.map(m=>`<option value="${m}"
              ${rec.status===m?'selected':''}>${m}</option>`).join('')}
          </select>
        </td>`;
      quickBody.appendChild(tr);
    });

    // blank-new row
    const fpOpts = fps.map(fp=>`<option value="${fp._id}">${fp.name}</option>`).join('');
    const statusOpts = [
      '<option value="Ready Now">Ready Now</option>',
      '<option value="SOLD">SOLD</option>',
      ...monthNames.map(m=>`<option value="${m}">${m}</option>`)
    ].join('');
    const newTr = document.createElement('tr');
    newTr.dataset.id = '';
    newTr.innerHTML = `
      <td><input class="form-control qmi-input" data-field="address" placeholder="New address" required /></td>
      <td><input type="date" class="form-control qmi-input" data-field="listDate" required /></td>
      <td>
        <select class="form-select qmi-input" data-field="floorPlanId">
          <option value="">Select…</option>${fpOpts}
        </select>
      </td>
      <td><input type="number" step="0.01" class="form-control qmi-input" data-field="listPrice" /></td>
      <td><input type="number" class="form-control qmi-input" data-field="sqft" /></td>
      <td>
        <select class="form-select qmi-input" data-field="status">
          <option value="">Select…</option>${statusOpts}
        </select>
      </td>`;
    quickBody.appendChild(newTr);

    // auto-fill sqft & save on change for quick/inventory
    quickBody.querySelectorAll('select[data-field="floorPlanId"]').forEach(sel => {
      sel.addEventListener('change', e => {
        const row = e.target.closest('tr');
        const plan = fps.find(fp=>fp._id===e.target.value);
        const sq = row.querySelector('input[data-field="sqft"]');
        if(plan) sq.value = plan.sqft||'';
        sq.dispatchEvent(new Event('change'));
      });
    });
    quickBody.querySelectorAll('.qmi-input').forEach(el => {
      el.addEventListener('change', async e => {
        const row = e.target.closest('tr');
        const id  = row.dataset.id;
        const payload = { month };
        row.querySelectorAll('.qmi-input').forEach(inp => {
          const v = inp.value, f = inp.dataset.field;
          payload[f] = (f==='listPrice'||f==='sqft')
            ? parseFloat(v)||0
            : v;
        });
        if(!payload.address||!payload.floorPlanId||!payload.status||!payload.listDate) return;
        const url = id
          ? `/api/competitions/${competitionId}/quick-moveins/${id}`
          : `/api/competitions/${competitionId}/quick-moveins`;
        const method = id?'PUT':'POST';
        await fetch(url, {
          method,
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify(payload)
        });
        loadQuickHomes(month);
      });
    });

    // sold rows editable
    soldBody.innerHTML = '';
    sold.forEach(rec => {
  const plan = fps.find(fp => fp._id === rec.floorPlan) || {};
  const tr = document.createElement('tr');
  tr.dataset.id = rec._id;

  tr.innerHTML = `
    <td>
      <input 
        class="form-control sold-input" 
        data-field="address" 
        value="${rec.address}" 
      />
    </td>
    <td>
      <select class="form-select sold-input" data-field="floorPlanId">
        ${fps.map(fp => 
          `<option value="${fp._id}" ${fp._id===rec.floorPlan?'selected':''}>${fp.name}</option>`
        ).join('')}
      </select>
    </td>
    <td>
      <input 
        type="number" step="0.01"
        class="form-control sold-input"
        data-field="listPrice"
        value="${rec.listPrice}" 
      />
    </td>
    <td>
      <input 
        type="number"
        class="form-control sold-input"
        data-field="sqft"
        value="${rec.sqft}" 
      />
    </td>
    <td>
      <select class="form-select sold-input" data-field="status">
        ${statusOptions.replace(
          `value="${rec.status}"`,
          `value="${rec.status}" selected`
        )}
      </select>
    </td>
    <td>
      <input
        type="date"
        class="form-control sold-input"
        data-field="listDate"
        value="${rec.listDate ? new Date(rec.listDate).toISOString().substr(0,10) : ''}"
      />
    </td>
    <td>
      <input
        type="date"
        class="form-control sold-input"
        data-field="soldDate"
        value="${rec.soldDate ? new Date(rec.soldDate).toISOString().substr(0,10) : ''}"
      />
    </td>
  `;
  soldBody.appendChild(tr);
});
    soldBody.querySelectorAll('.sold-input').forEach(el => {
      el.addEventListener('change', async e => {
        const row = e.target.closest('tr');
        const id  = row.dataset.id;
        const payload = {};
        row.querySelectorAll('.sold-input').forEach(inp => {
          let v = inp.value, f = inp.dataset.field;
          if(f==='listPrice'||f==='sqft') v = parseFloat(v)||0;
          payload[f] = v;
        });
        await fetch(`/api/competitions/${competitionId}/quick-moveins/${id}`, {
          method:'PUT',
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify(payload)
        });
      });
    });
  }

  async function loadSales(month) {
    const recs = await fetch(
      `/api/competitions/${competitionId}/sales-records?month=${month}`
    ).then(r=>r.json());
    const r = recs[0]||{};
    salesBody.innerHTML = '';
    const tr = document.createElement('tr');
    tr.dataset.id = r._id||'';
    tr.dataset.month = month;
    const mIndex = parseInt(month.split('-')[1],10)-1;
    tr.innerHTML = `
      <td>${monthNames[mIndex]}</td>
      <td><input type="number" class="form-control sales-input" data-field="sales" value="${r.sales||''}" /></td>
      <td><input type="number" class="form-control sales-input" data-field="cancels" value="${r.cancels||''}" /></td>
      <td class="net-cell">${r.sales? r.sales-r.cancels:''}</td>
      <td><input type="number" class="form-control sales-input" data-field="closings" value="${r.closings||''}" /></td>
    `;
    salesBody.appendChild(tr);
    tr.querySelectorAll('.sales-input').forEach(input=>{
      input.addEventListener('blur', async e=>{
        const row     = e.target.closest('tr');
        const id      = row.dataset.id;
        const sales   = parseInt(row.querySelector('[data-field="sales"]').value)||0;
        const cancels = parseInt(row.querySelector('[data-field="cancels"]').value)||0;
        const closings= parseInt(row.querySelector('[data-field="closings"]').value)||0;
        row.querySelector('.net-cell').textContent = sales-cancels;
        const payload = {sales,cancels,closings};
        let url = `/api/competitions/${competitionId}/sales-records`;
        let method='POST';
        if(id){ url+=`/${id}`; method='PUT'; }
        else { payload.month = month; }
        const res = await fetch(url,{
          method, headers:{'Content-Type':'application/json'},
          body: JSON.stringify(payload)
        });
        const saved = await res.json();
        if(!id && saved._id) row.dataset.id = saved._id;
      });
    });
  }

  // ───────── event wiring & initial load ─────────
  monthNav.addEventListener('click', e => {
    if(e.target.tagName!=='A') return;
    e.preventDefault();
    monthNav.querySelectorAll('.nav-link').forEach(a=>a.classList.remove('active'));
    e.target.classList.add('active');
    const m = e.target.dataset.month;
    loadMonth(m);
    loadQuickHomes(m);
    loadSales(m);
  });

  sectionNav.addEventListener('click', e => {
    if(e.target.tagName!=='A') return;
    e.preventDefault();
    sectionNav.querySelectorAll('.nav-link').forEach(a=>a.classList.remove('active'));
    e.target.classList.add('active');
    document.querySelectorAll('.section')
      .forEach(sec=>sec.classList.toggle('d-none', sec.dataset.sectionContent!==e.target.dataset.section));
  });

  const init = monthNav.querySelector('.nav-link.active');
  if(init) {
    const m = init.dataset.month;
    loadMonth(m);
    loadQuickHomes(m);
    loadSales(m);
    sectionNav.querySelector('.nav-link.active').click();
  }
});

document.getElementById('addProBtn').addEventListener('click', () => {
  const val = document.getElementById('newPro').value.trim();
  if (!val) return;
  const div = document.createElement('div');
  div.className = 'badge bg-success me-1';
  div.textContent = val;
  document.getElementById('prosList').appendChild(div);
  document.getElementById('newPro').value = '';
});
document.getElementById('addConBtn').addEventListener('click', () => {
  const val = document.getElementById('newCon').value.trim();
  if (!val) return;
  const div = document.createElement('div');
  div.className = 'badge bg-danger me-1';
  div.textContent = val;
  document.getElementById('consList').appendChild(div);
  document.getElementById('newCon').value = '';
});
</script>

  
</main>
</body>
</html>