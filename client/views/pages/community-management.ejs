<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Community Management</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <link rel="stylesheet" href="/assets/css/main.css">
</head>
<body>
  <%- include('../partials/nav') %>
  <%- include('../partials/top-nav-community') %>
  <h1>Community Management</h1>

 <div class="horizontal-cont">
  <div class="sideBarMange">
   <!-- Community Creation -->
  
    <section class="community-form card card--grey">
      <h2>Add New Community</h2>
      <div class="card card--white">
          <form id="community-form">
            <label>Community Name: 
              <input type="text" id="communityName" class="form-control" required />
            </label>
            <label>Project Number:
              <input type="text" id="projectNumber" class="form-control" required />
            </label>
            <div>
              <button type="submit" class="btn btn-primary">Create Community</button>
            </div>
            
          </form>
          </div>
          </section>  
        
        


  <!-- Lot Addition -->
   <div class="card card--grey">
  
      <section>
        <h2>Import Communities from Excel/CSV</h2>
        <div class="card card--white">
          <form id="importForm" enctype="multipart/form-data">
            <!-- Dropzone -->
            <div id="importDropzone" class="dropzone" tabindex="0" aria-label="Upload CSV or XLSX by drag and drop">
              <div class="dz-inner">
                <div class="dz-icon">ðŸ“¥</div>
                <div class="dz-text">
                  <strong>Drag & drop</strong> your .csv or .xlsx here<br/>
                  or <button type="button" id="browseBtn" class="btn btn-link p-0 align-baseline">browse</button>
                </div>
              </div>

              <!-- Keep the original input (hidden) so existing JS/back-end work unchanged -->
              <input type="file" id="importFile" name="file" accept=".csv,.xlsx" hidden required />
            </div>

            <!-- File meta + actions -->
            <div class="dz-meta mt-2">
              <span id="fileName" class="text-muted">No file selected</span>
            </div>

            <div class="mt-3 d-flex gap-2">
              <button type="submit" class="btn btn-primary " id="uploadBtn" disabled>Upload</button>
              <a href="/samples/community-import-sample.csv" class="btn btn-outline-secondary">Download sample CSV</a>
            </div>

            <!-- Optional progress (can be toggled in JS) -->
            <div class="progress mt-2 d-none" id="uploadProgress" aria-hidden="true">
              <div class="progress-bar" role="progressbar" style="width: 0%"></div>
            </div>
          </form>
        </div>
      </section>


      <section class="lot-form">
        <h2>Add Lot to Community</h2>
        <div class="card card--white">
          <form id="lotForm">
          
            
              <div>
                <label>Community:   
                <select id="communitySelect" required></select>
                </label>
              </div>
              <div>
                <label>Job Number: <input type="text" id="jobNumber" class="form-control" required /></label>
                <label>Address: <input type="text" id="address" class="form-control" required /></label>
              </div>
              <div>
                <label>Lot: <input type="text" id="lot" class="form-control" required /></label>
                <label>Block: <input type="text" id="block" class="form-control" required /></label>
                <label>Phase: <input type="text" id="phase" class="form-control" required /></label>
              </div>
            <div>
              <label>Floor Plan: <input type="text" id="floorPlan" class="form-control" /></label>
              <label>Elevation: <input type="text" id="elevation"  class="form-control"/></label>
            </div>
            <div>
              <button type="submit" class="btn btn-primary">Add Lot</button>
            </div>
            
          </form>
        </div>
        </section>
      </div>
</div>

   

  <!-- Display Section -->
   <section class="lot-list card card--white">
  <h2>Lots by Community</h2>

  <!-- Toolbar -->
  <div class="d-flex flex-wrap align-items-center gap-2 mb-3">
    <label class="me-2">
      <span class="me-1">Community</span>
      <select id="cm-community-filter" class="form-select form-select-sm" style="min-width: 220px;"></select>
    </label>

    <input id="cm-lot-search" class="form-control form-control-sm" placeholder="Search address..." style="max-width: 280px;" />

    <div class="vr mx-2 d-none d-md-block"></div>

    <button id="cm-edit-toggle" class="btn btn-sm btn-secondary" aria-pressed="false">Edit Mode</button>
    <button id="cm-delete-toggle" class="btn btn-sm btn-danger" aria-pressed="false">Delete Mode</button>
    <small class="text-muted ms-2">Tip: Edit cells then press Enter/blur to save.</small>
  </div>

  <div id="lotsContainer"></div>
</section>

   </div>
 

  <script src="/assets/js/community.js"></script>
  <script>
    

    (() => {
  const dz = document.getElementById('importDropzone');
  const fileInput = document.getElementById('importFile');
  const browseBtn = document.getElementById('browseBtn');
  const fileName = document.getElementById('fileName');
  const uploadBtn = document.getElementById('uploadBtn');
  const importForm = document.getElementById('importForm');
  const progressWrap = document.getElementById('uploadProgress');
  const progressBar = progressWrap ? progressWrap.querySelector('.progress-bar') : null;

  if (!dz || !fileInput || !browseBtn || !fileName || !uploadBtn || !importForm) return;

  // Helpers
  const prevent = e => { e.preventDefault(); e.stopPropagation(); };
  const setFile = f => {
    if (!f) return;
    // put the dropped file into the hidden input so existing code picks it up
    const dt = new DataTransfer();
    dt.items.add(f);
    fileInput.files = dt.files;

    fileName.textContent = `${f.name} â€¢ ${(f.size / 1024).toFixed(1)} KB`;
    uploadBtn.disabled = false;
  };

  // Drag events
  ['dragenter','dragover','dragleave','drop'].forEach(evt => {
    dz.addEventListener(evt, prevent, false);
  });
  ['dragenter','dragover'].forEach(evt => {
    dz.addEventListener(evt, () => dz.classList.add('drag'), false);
  });
  ['dragleave','drop'].forEach(evt => {
    dz.addEventListener(evt, () => dz.classList.remove('drag'), false);
  });
  dz.addEventListener('drop', e => {
    const f = e.dataTransfer.files && e.dataTransfer.files[0];
    setFile(f);
  });

  // Keyboard + click browse
  dz.addEventListener('click', () => fileInput.click());
  dz.addEventListener('keydown', e => {
    if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); fileInput.click(); }
  });
  browseBtn.addEventListener('click', () => fileInput.click());
  fileInput.addEventListener('change', () => {
    const f = fileInput.files && fileInput.files[0];
    setFile(f);
  });

  // OPTIONAL: show progress if you intercept the submit with XHR
  // If your backend expects a regular form POST, you can skip this block and let
  // your existing handler submit. Otherwise, uncomment to POST with progress.
  
})();

document.addEventListener('DOMContentLoaded', () => {
  const esc = s => String(s ?? '').replace(/[&<>"]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[c]));
  const $ = sel => document.querySelector(sel);
  const communitySel = $('#cm-community-filter');
  const searchInput  = $('#cm-lot-search');
  const editBtn      = $('#cm-edit-toggle');
  const delBtn       = $('#cm-delete-toggle');
  const lotsWrap     = $('#lotsContainer');

  let state = {
    communities: [],
    communityId: null,
    search: '',
    editMode: false,
    deleteMode: false
  };

  // --------- load communities (for dropdown) ----------
  async function loadCommunities() {
    const res = await fetch('/api/communities');
    if (!res.ok) throw new Error('Failed to load communities');
    const items = await res.json();
    state.communities = Array.isArray(items) ? items : [];
    communitySel.innerHTML = state.communities.map(c =>
      `<option value="${c._id}">${esc(c.name)}${c.projectNumber ? ' â€” ' + esc(c.projectNumber) : ''}</option>`
    ).join('');
    if (!state.communityId && state.communities[0]) {
      state.communityId = state.communities[0]._id;
      communitySel.value = state.communityId;
    }
  }

  // --------- load/render lots for selected community ----------
  async function loadLots() {
    if (!state.communityId) {
      lotsWrap.innerHTML = '<div class="text-muted">Select a community</div>';
      return;
    }
    const url = new URL(`/api/communities/${state.communityId}/lots`, location.origin);
    if (state.search) url.searchParams.set('q', state.search);
    const res = await fetch(url);
    if (!res.ok) {
      lotsWrap.innerHTML = `<div class="text-danger">Failed to load lots (${res.status})</div>`;
      return;
    }
    const lots = await res.json();
    renderTable(Array.isArray(lots) ? lots : []);
  }

  function renderTable(lots) {
    const deleteCol = state.deleteMode ? '<th style="width:42px"></th>' : '';
    const head = `
      <thead>
        <tr>
          <th>Job #</th>
          <th>Lot</th>
          <th>Block</th>
          <th>Phase</th>
          <th>Address</th>
          <th>Elevation</th>
          ${deleteCol}
        </tr>
      </thead>
    `;

    const rows = lots.map(l => {
      const delCell = state.deleteMode
        ? `<td class="text-center"><button class="btn btn-sm btn-outline-danger js-row-del" data-id="${esc(l._id)}" title="Delete this lot">Ã—</button></td>`
        : '';
      return `
        <tr data-id="${esc(l._id)}">
          ${td('jobNumber', l.jobNumber)}
          ${td('lot', l.lot)}
          ${td('block', l.block)}
          ${td('phase', l.phase)}
          ${td('address', l.address)}
          ${td('elevation', l.elevation)}
          ${delCell}
        </tr>
      `;
    }).join('') || `<tr><td colspan="${state.deleteMode ? 7 : 6}" class="text-muted">No lots found</td></tr>`;

    lotsWrap.innerHTML = `
      <div class="table-responsive">
        <table class="table table-sm table-bordered align-middle mb-0">
          ${head}
          <tbody>${rows}</tbody>
        </table>
      </div>
    `;

    // attach events: edit + delete
    if (state.editMode) bindCellEditing(lotsWrap);
    if (state.deleteMode) bindRowDeletion(lotsWrap);
  }

  function td(field, val) {
    const attrs = state.editMode ? ' contenteditable="true" data-field="'+field+'"' : ' data-field="'+field+'"';
    return `<td${attrs}>${esc(val ?? '')}</td>`;
  }

  function bindCellEditing(root) {
    // Save on Enter or on blur if changed
    root.querySelectorAll('td[contenteditable="true"]').forEach(td => {
      td.addEventListener('keydown', async (e) => {
        if (e.key === 'Enter') { e.preventDefault(); td.blur(); }
      });
      td.addEventListener('blur', async (e) => {
        const tr = td.closest('tr');
        const lotId = tr?.dataset?.id;
        const field = td.dataset.field;
        if (!lotId || !field) return;

        const newValue = td.textContent.trim();

        // build minimal payload of changed field
        const payload = { [field]: newValue };
        // normalize/guards for a couple of fields
        if (field === 'jobNumber') payload.jobNumber = String(newValue).padStart(4, '0');

        try {
          const res = await fetch(`/api/communities/${state.communityId}/lots/${lotId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
          if (!res.ok) {
            alert(`Save failed (${res.status})`);
            // re-load to revert bad edit
            await loadLots();
          }
        } catch (err) {
          console.error(err);
          alert('Save failed');
          await loadLots();
        }
      });
    });
  }

  function bindRowDeletion(root) {
    root.querySelectorAll('.js-row-del').forEach(btn => {
      btn.addEventListener('click', async () => {
        const lotId = btn.dataset.id;
        if (!lotId) return;
        if (!confirm('Delete this lot? This cannot be undone.')) return;

        try {
          const res = await fetch(`/api/communities/${state.communityId}/lots/${lotId}`, { method: 'DELETE' });
          if (!res.ok) {
            const t = await res.text();
            throw new Error(t || `Delete failed (${res.status})`);
          }
          await loadLots();
        } catch (err) {
          console.error(err);
          alert(err.message || 'Delete failed');
        }
      });
    });
  }

  // --------- events ----------
  communitySel?.addEventListener('change', () => {
    state.communityId = communitySel.value || null;
    loadLots();
  });

  // debounce search
  let t;
  searchInput?.addEventListener('input', () => {
    clearTimeout(t);
    t = setTimeout(() => {
      state.search = searchInput.value.trim();
      loadLots();
    }, 250);
  });

  editBtn?.addEventListener('click', async () => {
    state.editMode = !state.editMode;
    editBtn.classList.toggle('btn-secondary', !state.editMode);
    editBtn.classList.toggle('btn-success', state.editMode);
    editBtn.setAttribute('aria-pressed', String(state.editMode));
    await loadLots();
  });

  delBtn?.addEventListener('click', async () => {
    state.deleteMode = !state.deleteMode;
    delBtn.classList.toggle('btn-danger', !state.deleteMode);
    delBtn.classList.toggle('btn-warning', state.deleteMode);
    delBtn.setAttribute('aria-pressed', String(state.deleteMode));
    await loadLots();
  });

  // --------- boot ----------
  (async () => {
    await loadCommunities();
    await loadLots();
  })();
});
  </script>



  
</body>
</html>
